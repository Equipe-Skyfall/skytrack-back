generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model MeteorologicalStation {
  id             String                      @id @default(uuid())
  name           String                      @unique @db.VarChar(100)
  latitude       Decimal                     @db.Decimal(10, 8)
  longitude      Decimal                     @db.Decimal(11, 8)
  description    String?
  status         MeteorologicalStationStatus @default(ACTIVE)
  createdAt      DateTime                    @default(now()) @map("created_at")
  updatedAt      DateTime                    @updatedAt @map("updated_at")
  address              String?                     @db.VarChar(255)
  macAddress           String?                     @unique @map("mac_address") @db.VarChar(50)
  sensorReadings       SensorReading[]
  parameters           Parameter[]
  alerts               RegisteredAlerts[]
  // triggeredAlerts      TriggeredAlerts[]

  @@index([status])
  @@index([latitude, longitude])
  @@index([name])
  @@index([macAddress])
  @@map("meteorological_stations")
}

model SensorReading {
  id         String                @id @default(uuid())
  stationId  String                @map("station_id")  // This is the station UUID from MAC address lookup
  timestamp  DateTime
  mongoId    String                @unique @map("mongo_id")
  readings   Json                  // JSONB field for flexible sensor data storage
  parameters Json                  // JSONB field for the processed data after going through the parameters
  createdAt  DateTime              @default(now()) @map("created_at")
  updatedAt  DateTime              @updatedAt @map("updated_at")
  station    MeteorologicalStation @relation(fields: [stationId], references: [id], onDelete: Cascade)

  @@index([stationId])
  @@index([timestamp])
  @@index([stationId, timestamp])
  @@index([mongoId])
  @@map("sensor_readings")
}

model Parameter {
  id                  String   @id @default(uuid())
  stationId           String   @map("station_id")
  name                String
  metric              String

  readingCoefficients Json       // per-reading offsets/factors
  polynomial          String?    // "a0 + a1*temperatura + a2*umidade^2"
  coefficients        Float[]    // [1.2, 0.95, -0.002] corresponde Ã  [a0, a1, a2]

  station             MeteorologicalStation @relation(fields: [stationId], references: [macAddress], onDelete: Cascade)
  alerts              RegisteredAlerts[]

  @@index([stationId])
  @@map("parameter")
}

model RegisteredAlerts {
  id          String   @id @default(uuid())
  stationId   String   @map("station_id")
  parameterId String   @map("parameter_id")
  createdAt   DateTime

  description String
  threshold   Decimal
  level       String   @default("warning") // optional: warning/critical
  condition   String   @default("GREATER_THAN") // optional: GREATER_THAN / LESS_THAN
  durationMinutes Int? // optional: trigger if condition sustained

  station         MeteorologicalStation @relation(fields: [stationId], references: [macAddress], onDelete: Cascade)
  parameter       Parameter             @relation(fields: [parameterId], references: [id], onDelete: Cascade)
  // triggeredAlerts TriggeredAlerts[]

  @@index([stationId])
  @@index([parameterId])
  @@unique([stationId, parameterId, level])
  @@map("registered_alerts")
}

// model TriggeredAlerts {
//   id        String   @id @default(uuid())
//   stationId String
//   alertId   String
//   timestamp DateTime @default(now())
//   value     Decimal

//   station   MeteorologicalStation @relation(fields: [stationId], references: [macAddress], onDelete: Cascade)
//   alert     RegisteredAlerts      @relation(fields: [alertId], references: [id], onDelete: Cascade)

//   @@index([stationId])
//   @@index([alertId])
//   @@index([stationId, alertId])
//   @@unique([alertId, timestamp])
//   @@map("triggered_alerts")
// }

model MigrationState {
  id                String   @id @default(uuid())
  name              String   @unique
  lastSyncTimestamp Int      @map("last_sync_timestamp")
  totalMigrated     Int      @default(0) @map("total_migrated")
  lastRunAt         DateTime @default(now()) @map("last_run_at")
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  @@map("migration_states")
}

enum MeteorologicalStationStatus {
  ACTIVE
  INACTIVE
}
