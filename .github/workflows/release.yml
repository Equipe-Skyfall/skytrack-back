name: Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Generate Prisma client
      run: npx prisma generate

    - name: Run tests
      run: npm test

    - name: Build project
      run: npm run build

    - name: Get latest tag and calculate new version
      id: version
      run: |
        # Get the latest tag, if any
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

        if [ -z "$LATEST_TAG" ]; then
          # No tags exist, start with v1.0.0
          NEW_VERSION="1.0.0"
          echo "current_version=none" >> $GITHUB_OUTPUT
        else
          # Parse the latest tag and increment patch version
          # Remove 'v' prefix if present
          CLEAN_TAG=${LATEST_TAG#v}

          # Split version into parts
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CLEAN_TAG"

          # Increment patch version
          PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "current_version=$LATEST_TAG" >> $GITHUB_OUTPUT
        fi

        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "## Changes" >> $GITHUB_OUTPUT

        if [ "${{ steps.version.outputs.current_version }}" = "none" ]; then
          echo "- Initial release" >> $GITHUB_OUTPUT
        else
          git log --pretty=format:"- %s (%h)" ${{ steps.version.outputs.current_version }}..HEAD >> $GITHUB_OUTPUT 2>/dev/null || echo "- No changes found" >> $GITHUB_OUTPUT
        fi

        echo "" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Git Tag
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag ${{ steps.version.outputs.new_tag }}
        git push origin ${{ steps.version.outputs.new_tag }}

    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.new_tag }}
        release_name: Release ${{ steps.version.outputs.new_tag }}
        body: |
          ðŸš€ **SkyTrack API ${{ steps.version.outputs.new_tag }}**

          ${{ steps.changelog.outputs.changelog }}

          ### ðŸ“¦ Assets
          - Built application ready for deployment
          - Full source code

          ### ðŸ”— Links
          - [API Documentation](https://sky-track-backend.vercel.app/docs)
          - [Repository](https://github.com/${{ github.repository }})
        draft: false
        prerelease: false